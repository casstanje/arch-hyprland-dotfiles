;;CLOCK
(defpoll time
  :interval "1s"
  :initial "initial-value"
  `LC_TIME=en_US.utf8 date +"%a %d/%m/%y | week %U | %H:%M"`
)

;;MPRIS
(deflisten mprisArt
  :initial "wow"
  `playerctl --player=chromium,%any --follow metadata --format {{mpris:artUrl}}`
)

(deflisten mprisPosition
  :initial "0"
  `playerctl position --follow`
)

(deflisten mprisLength
  :initial "0"
  `playerctl metadata --follow metadata --format {{mpris:length}}`
)

(deflisten mprisTitle
  :initial "0"
  `playerctl metadata --follow --format "{{artist}} - {{title}}"`
)

(deflisten mprisStatus
  :initial "0"
  `playerctl status --follow --format "{{lc(status)}}"`
)



(defwindow taskBar
  :monitor 0
  :class "barWindow"
  :geometry (geometry
    :x "0%"
    :y "16px"
    :width "100%"
    :height: "45px"
    :anchor: "top center"
  )
  :vexpand true
  :stacking "fg"
  :reserve (struts
    :distance "4%"
    :side "top"
  )
  :windowtype "dock"
  :exlusive false
  :wm-ignore false
  (box
    :class "barContainer"
    (centerbox
      :class "bar"
      :orientation "h"
      (box "wow")
      (center)
      (rightside)
    )
  )
)

(defwidget center []
  (box
    :halign "center"
    :orientation "h"
    :space-evenly false
    :spacing 10
    
    (box
      :class "albumArtCover"
      :style 'background-image: url("${mprisArt}")' 
      :width 30
      :height 30
    )
    
    (eventbox
      :onclick `playerctl previous`
      :onrightclick `playerctl next`
      :onmiddleclick `playerctl play-pause`
      (box
        :orientation "v"
        :space-evenly false
        :spacing 4
        :valign "center"
        :tooltip "Left/right click to change song, middle click to pause"
        (box
          :orientation "h"
          :space-evenly false
          :spacing 4
          :halign "start"
          mprisTitle
        )
        (progress
          :class { mprisStatus == "playing" ? "songProgress playing" : "songProgress paused" }
          :width 300
          :value { mprisPosition / mprisLength * 100 }
        )
      )
    )
  )
)

(defwidget rightside []
  (box
    :space-evenly false
    :spacing 10
    :halign "end"
    (box
      (systray
        :orientation "h"
        :class "systemTray"
        :icon-size 15
        :spacing 6
        :space-evenly false
      )
    )
    
    (box
      time
    )
  )
)


(defwidget greeter [?text name]
  (labeled-container
    :orientation "horizontal"
    :halign "center"
    :name text
    (button
      :onclick "notify-send 'Hello' 'Hello, ${name}'"
      "Greet"
    )
  )
)

(defwidget labeled-container [name]
  (box
    :class "container"
    name
    (children)
  )
)